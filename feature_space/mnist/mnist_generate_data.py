# -*- coding: utf-8 -*-
"""mnist_generate_data

Automatically generated by Colaboratory.
"""

import numpy as np
import tensorflow.compat.v2 as tf

tf.enable_v2_behavior()

"""# Generate Data"""

def corrupt_noise(X, corrupt_prob, noise_prob):

    X_crpt = np.where(np.random.binomial(n=1, p=corrupt_prob, size=X.shape), 0,
          X)
    X_crpt_noise = np.where(
          (X < 0.01) * np.random.binomial(n=1, p=noise_prob, size=X.shape),
          np.random.uniform(0.0, 1.0, size=X.shape), X_crpt)
    return X_crpt_noise


def mnist_generate_data(N, corrupt_prob_list, noise_prob_list,
      x_original_file_list, y_file):

    (x_train_signal, y_train), (x_test_signal, y_test) = (
          tf.keras.datasets.mnist.load_data())

    # Preprocess the data (these are Numpy arrays)
    # x_train = x_train.reshape(60000, 28, 28, 1).astype('float32') / 255
    # x_test = x_test.reshape(10000, 28, 28, 1).astype('float32') / 255
    x_train_signal = x_train_signal.astype('float32') / 255
    x_test_signal = x_test_signal.astype('float32') / 255

    # x_train = np.reshape(x_train, (-1, 10, 784))
    # x_test = np.reshape(x_test,  (-1, 10, 784))

    y_train = y_train.astype('float32')
    y_test = y_test.astype('float32')

    x_train_signal = x_train_signal[0:N]
    y_train = y_train[0:N]

    # x_test_signal = x_test_signal[0:N]
    # y_test = y_test[0:N] 

    np.save(y_file, (y_train, y_test))

    nCn = len(corrupt_prob_list)
    for iCn in range(nCn):
        x_train = corrupt_noise(x_train_signal, corrupt_prob_list[iCn],
              noise_prob_list[iCn])
        x_test = corrupt_noise(x_test_signal, corrupt_prob_list[iCn],
              noise_prob_list[iCn])
        np.save(x_original_file_list[iCn], (x_train, x_test))

corrupt_prob_list = [0.1]
noise_prob_list = [0.1]
#corrupt_prob_list = [0.0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35]
#noise_prob_list = [0.0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35]
nCn = len(corrupt_prob_list)
file_cn_list = [None] * nCn
for iCn in range(nCn):
    file_cn_list[iCn] = str(int(corrupt_prob_list[iCn] * 100)).zfill(2) + \
          '_' + str(int(noise_prob_list[iCn] * 100)).zfill(2)

x_original_file_list = [None] * nCn
for iCn in range(nCn):
    x_original_file_list[iCn] = (
          'mnist_x_original_' + file_cn_list[iCn] + '.npy')
y_file = 'mnist_y.npy'

N = 400
#N = 1000

np.random.seed(0)
mnist_generate_data(N=N, corrupt_prob_list=corrupt_prob_list,
      noise_prob_list=noise_prob_list,
      x_original_file_list=x_original_file_list, y_file=y_file)